In the mystical land of Altura, stood a giant Tree of Wisdom — not just any tree, but a binary tree. Each creature in Altura's kingdom lived in nodes of this tree, with one entryway (the root), and at most two pathways from each node (left and right).

The Council of Coders was given a divine quest: to find the height of this tree. It wasn’t a height measured in meters or miles, but in levels of depth — from the root to the deepest leaf node.

But beware! The height wasn’t the number of nodes — it was the number of edges from root to the furthest leaf.

And so began the quest to traverse the tree, measure its depth, and uncover its towering height!.

Your task is to find the height of a binary tree.

Input Format:

    Input consists of continuous values separated by space until user enters -1

Output Format:

Print a single integer: the height of the binary tree.


Constraints:
NA


Example:
Sample Input:

1 2 3 4 5 6 7 8 -1

Sample Output:

4


Explanation:
NA


Public Test Cases:
#	Input	Expected Output
1	
1 2 3 4 5 6 7 8 -1
4
2	
10 9 8 7 6 -1
3
3	
5 4 3 6 7 4 5 6 3 5 8 5 3 8 -1
4
4	
1 2 3 4 5 6 7 8 -1
4
5	
10 9 8 7 6 -1
3




import java.util.*;
class Main{
  static Node root = null;
  public static void append(int val){
    Node nn = new Node(val);
    if(root == null){
      root = nn;
    }
    else{
      Queue<Node> q = new LinkedList<>();
      q.offer(root);
      while(!q.isEmpty()){
        Node temp = q.poll();
        if(temp.left == null){
          temp.left = nn;
          return;
        }
        else
          q.offer(temp.left);
        if(temp.right == null){
          temp.right = nn;
          return;
        }
        else
          q.offer(temp.right);
      }
    }
  }
  public static int height(Node temp){
    if(temp == null)
      return 0;
    return 1+Math.max(height(temp.left),height(temp.right));
  }
  public static void main(String[] args){
    Scanner in = new Scanner(System.in);
    while(true){
      int val = in.nextInt();
      if(val==-1){
        break;
      }
      append(val);
    }
    System.out.println(height(root));
  }
}
class Node{
  int data;
  Node left,right;
  Node(int val){
    this.data = val;
    this.left = this.right = null;
  }
}
