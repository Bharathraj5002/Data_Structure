class Tree {
    int value;
    Tree left, right;

    Tree(int val) {
        this.value = val;
        left = right = null;
    }
}

class BinarySearch {
    Tree root = null;

    public void insert(int val) {
        root = insert(root, val);
    }

    private Tree insert(Tree root, int val) {
        if (root == null) {
            return new Tree(val);
        }
        if (root.value > val) {
            root.left = insert(root.left, val);
        } else if (root.value < val) {
            root.right = insert(root.right, val);
        }
        return root;
    }

    private int findMin(Tree root) {
        while (root.left != null) {
            root = root.left;
        }
        return root.value;
    }

    public void delete(int val) {
        root = delete(root, val);
    }

    private Tree delete(Tree root, int val) {
        if (root == null) {
            return null;
        }
        if (root.value > val) {
            root.left = delete(root.left, val);
        } else if (root.value < val) {
            root.right = delete(root.right, val);
        } else {
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }
            root.value = findMin(root.right);
            root.right = delete(root.right, root.value);
        }
        return root;
    }

    public void inorder(Tree root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.value + " ");
            inorder(root.right);
        }
    }
}

class Main {
    public static void main(String[] args) {
        BinarySearch bs = new BinarySearch();
        bs.insert(50);
        bs.insert(30);
        bs.insert(70);
        bs.insert(20);
        bs.insert(80);
        bs.insert(60);
        bs.insert(40);

        bs.inorder(bs.root);
        System.out.println();

        bs.delete(70);
        bs.inorder(bs.root);
    }
}
