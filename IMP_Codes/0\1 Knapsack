public class Knapsack01 {

    public static int knapsack(int[] values, int[] weights, int W, int[] xi) {
        int n = values.length;
        int[][] dp = new int[n + 1][W + 1];

        // Fill DP table
        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= W; w++) {
                if (weights[i - 1] <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // Traceback to find selected items
        int w = W;
        for (int i = n; i > 0; i--) {
            if (dp[i][w] != dp[i - 1][w]) {
                xi[i - 1] = 1; // Item i-1 is included
                w -= weights[i - 1]; // Reduce weight
            } else {
                xi[i - 1] = 0;
            }
        }

        return dp[n][W];
    }

    public static void main(String[] args) {
        int[] values  = {3, 1, 2, 4};
        int[] weights = {4, 6, 3, 5};
        int W = 8;

        int[] xi = new int[values.length];

        int maxValue = knapsack(values, weights, W, xi);
        System.out.println("Maximum value in Knapsack: " + maxValue);

        System.out.print("Selected items (xi): ");
        for (int x : xi) {
            System.out.print(x + " ");
        }
    }
}


output dp

i\w | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8
  0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0
  1 | 0 | 0 | 0 | 0 | 3 | 3 | 3 | 3 | 3
  2 | 0 | 0 | 0 | 0 | 3 | 3 | 3 | 3 | 3
  3 | 0 | 0 | 0 | 2 | 3 | 3 | 3 | 5 | 5
  4 | 0 | 0 | 0 | 2 | 3 | 4 | 4 | 5 | 6
