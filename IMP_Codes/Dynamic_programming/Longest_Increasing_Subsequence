
Given an array of integers, find the length of the longest subsequence such that all elements of the subsequence are strictly increasing.
Input Format:
First line: An integer n (number of elements)
Second line: n space-separated integers
Output Format:
One integer: Length of the longest increasing subsequence

Constraints:

1 ≤ n ≤ 10^3
-10^4 ≤ arr[i] ≤ 10^4

Example:

Sample Input:610 9 2 5 3 7
Sample Output:3

Explanation:

LIS is [2, 5, 7]

Public Test Cases:
#InputExpected Output1
5 1 2 3 4 5
5
2
1 10
1
3
7 3 4 -1 0 6 2 3
4
4
6 3 10 2 1 20 4
3
5
8 50 3 10 7 40 80 5 9
4
6
6 10 9 2 5 3 7
3
7
8 0 1 0 3 2 3 4 5
6
8
5 5 4 3 2 1
1



import java.util.Scanner;
import java.util.Arrays;
class Main{
  public static void main(String[] args){
    Scanner in = new Scanner(System.in);
    int n = in.nextInt();
    int arr[] = new int[n];
    for(int i=0;i<n;i++)
      arr[i] = in.nextInt();
    int dp[] = new int[n];
    Arrays.fill(dp,1);
    for(int i=1;i<n;i++){
      for(int j=0;j<i;j++)
        if(arr[i]>arr[j])
          dp[i] = Math.max(dp[i],dp[j]+1);
    }
    int max = 0;
    for(int i=0;i<n;i++){
      max = Math.max(dp[i],max);
    }
    System.out.println(max);
  }
}
