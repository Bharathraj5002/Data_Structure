public class NQueens {
    final int N;

    public NQueens(int N) {
        this.N = N;
    }

    // Main method to trigger solving
    public void solve() {
        char[][] board = new char[N][N];

        // Fill board with '.'
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                board[i][j] = '.';

        solveNQueens(board, 0);
    }

    // Recursive backtracking function
    private void solveNQueens(char[][] board, int col) {
        if (col == N) {
            printBoard(board);
            System.out.println(); // separate solutions
            return;
        }

        for (int row = 0; row < N; row++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q';
                solveNQueens(board, col + 1);
                board[row][col] = '.'; // backtrack
            }
        }
    }

    // Check if it's safe to place a queen
    private boolean isSafe(char[][] board, int row, int col) {
        // Check this row on left
        for (int i = 0; i < col; i++)
            if (board[row][i] == 'Q')
                return false;

        // Check upper diagonal on left
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 'Q')
                return false;

        // Check lower diagonal on left
        for (int i = row, j = col; i < N && j >= 0; i++, j--)
            if (board[i][j] == 'Q')
                return false;

        return true;
    }

    // Print the current board state
    private void printBoard(char[][] board) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(board[i][j]);
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int n = 4; // change this to try different sizes
        NQueens queenSolver = new NQueens(n);
        queenSolver.solve();
    }
}
